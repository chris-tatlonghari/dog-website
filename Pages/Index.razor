@page "/"
@using System.Timers

<PageTitle>Index</PageTitle>

<div class="container-fluid;" 
    style="background: linear-gradient(to left bottom, #f2f8c9, #ffe9bf, #ffdac3, #ffced2, 
    #fec8e4, #edc9ef, #d8cbf6, #c1cef8, #b6d2f6, #afd6f2, #acd8ed, #addae6);"

    <div class="text-center">

        <h1 class="pt-3 pb-5"> Days Until We Get Our Newfie! </h1>

        <div class="container-fluid pt-5 pb-5">

            <div class="row pt-2 pb-2">
                <div class="col-md-3">
                    <h1>Days</h1>
                    <h3> @days </h3>
                </div>

                <div class="col-md-3"> 
                    <h1>Hours</h1>
                    <h3> @hours </h3>
                </div>

                <div class="col-md-3"> 
                    <h1>Minutes</h1>
                    <h3> @minutes </h3>
                </div>

                <div class="col-md-3">
                    <h1>Seconds</h1>
                    <h3> @seconds </h3>
                </div>
            </div>

        </div>
        
        <div class="pt-5 pb-5">
            <img src="images/cartoon-newfoundland.jpg" title="" alt="dog" />
        </div>
        
    </div>

</div>

@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@code {
    private Timer timer = new(1000);
    private int days, hours, minutes, seconds;
    private DateTime dogRetrievalDate;

    protected override async Task OnInitializedAsync() {
        dogRetrievalDate = new DateTime(2022, 12, 03);
        timer.Elapsed += (sender, EventArgs) => Countdown();
        timer.Start();
        await base.OnInitializedAsync();
    }

    private void Countdown() {
        var distance = dogRetrievalDate - DateTime.Now;
        days = distance.Days;
        hours = distance.Hours;
        minutes = distance.Minutes;
        seconds = distance.Seconds;
        if (days <= 0 && hours <= 0 && minutes <= 0 && seconds <= 0) {
            days = 0;
            hours = 0;
            minutes = 0;
            seconds = 0;
            timer.Stop();
        }

        InvokeAsync(StateHasChanged);
    }
}